#+OPTIONS: ':nil *:t -:t ::t <:t H:2 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: From DDT to BDD
#+DATE: <2018-09-14 Fri>
#+AUTHOR: Roger Gordon
#+EMAIL: roger@gorrog.org
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.13)
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+BEAMER_FRAME_LEVEL: 1
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
* Testing, TDD and DDT
** Testing code is good!
*** Benefits of testing 
   As developers, we all know that writing tests is important.
    - Prevents logic errors
    - Helps with refactoring
    - Helps with what to work on
    - Helps to document the system
    - Seems slow, but increases long term development speed
** TDD is even better!
*** Benefits 
    - Ensures we don't write code we don't need
    - Ensures we are sure about the requirements
    - Necessarily ensures our test coverage is 100%
** DDT
*** Is our coverage 100%?
    If TDD ensures 100% code coverage, and we practice TDD, why don't we have 100% code coverage?
*** We don't really practice TDD
    TDD is great in theory, but has a hidden assumption
    - /You know exactly what you should do before you start working./
    - Questions about requirements often come up as we are developing.
    - In this situation TDD is slow and frustrating, because you need to redo both your code and your tests multiple times.
    - We end up practicing *DDT (Development Driven Tests)*
** DDT becomes our standard
*** Habits 
    As developers we have a lot of stuff going on in our heads at any one time.
    As humans, we instinctively find ways to reduce the amount of mental work we need to do through habits.
    Once something works, we keep doing it unless there's a good reason to change.
    - Once we start DDT, it becomes a habit.
    - Even if we could use TDD in a certain case, we implement DDT out of habit.
** DDT works!
*** We are doing well already 
     - Our code is generally robust
     - Our test coverage is high
     - We have a good amount of tests
** DDT works (sometimes).
*** We guess about functionality 
    - We make guesses about how our code should work, based on how we understand the requirements.
    - We sometimes get it wrong.
    - If the requirements change, we need to remember to update our tests and code.
*** Our tests do not clearly document system behaviour
    - Only developers can read our tests easily.
    - Our tests make many implicit assumptions. The reason for these assumptions is not always clear.
    - Eg:[[file:~/ownCloud/Documents/Career/Design_Development/Clients/Tangent_Solutions/Vumatel/orderfulfilmentservice/orders/ae/tests/test_order.py::def%20test_existing_customer_creation_failure(self):][Example of hard to understand test]] 
** DDT works (sometimes) continued [2]...
*** Our coverage numbers are deceptive
    - We may have a test that calls the code, but that doesn't mean it is a useful test.
    - The assumptions behind a particular test may never be true.
*** We lose track of what we're doing
    Have you ever been working on something and then something else higher priority got your attention? Do you always remember what you were doing previously? How about on Monday morning? How about after leave?
** DDT works (sometimes) continued [3]...
*** Business and development are disconnected
    - Developers speak code
    - Business speaks requirements
    - In general, Business can't read code to check it meets requirements
    - Often, development doesn't understand requirements properly
  We end up writing code that's not actually needed, and leave out bits that are required.
* Intro to BDD 
** There is a better way!
*** Behaviour Driven Development (BDD)
**** History 
     - A spin off of TDD, developed in around 2009 by Dan North
     - Resulted in the development of the first BDD testing software, JBehave, for Java
**** How it works
     - Uses a plain text business language to define requirements
     - This language can be read by business, developers and software
     - Software maps the language to automated tests
       
** Example: calculator.feature Feature section
   - Describes the feature
   - There should be one of these per feature file.
   - Does not map to any tests
#+BEGIN_SRC text
  Feature: Performing basic arithmetic operations

      In order to perform basic arithmetic
      As a person who is bad at maths
      I want to be able to provide 2 numbers
      and an operator and get a result back.
#+END_SRC

** Example: calculator.feature Background section
   - For repeated assumptions relevant to all your scenarios
   - One per file
   - Runs before each scenario
#+BEGIN_SRC text
  Background:

      Given that we will not use numbers greater
      than 4 digits
          And that we will enter the input in the
          order number1, number2, operator
      When we send a request to the calculator
      Then the response will start with "Result = "
          And the response will end with a number

#+END_SRC
    
    
** Example: calculator.feature Scenario section
   - Many per file encouraged
#+BEGIN_SRC text
  Scenario: Adding 2 numbers

      Given we use the "add" operator for our operations
          And our first number is <number1>
          And our second number is <number2>
      When we call the calculator with our numbers and
      operator
      Then the calculator will return the value <result>

          | number1 | number2 | result |

          |    1    |    1    |   2    |
          |    1    |    2    |   3    |
          |    1    |    3    |   4    |
          |    1    |    6    |   4    |
#+END_SRC
